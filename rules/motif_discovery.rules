################################################################
## Definition of the rules for motif discovery with RSAT. 
##
## These rules enable the execution of various motif discovery
## programs and cluster the discovered motifs.


## COMMAND TO RUN THIS ON A CLUSTER:
## snakemake --forceall -s snakemake_files/rules/motif_discovery.rules all -c 'qsub -V' -j  --jobname 'myjobname_{rulename}.{jobid}.sh' --stats execution_stats.txt


#V=2

## Specific parameters for this analysis
#INPUT_DIR="public_html/demo_files"
#SEQ_PREFIX="MET_up800-noorf"

import os
workdir: os.getcwd()

## Path to input sequence
#INPUT_SEQ = expand('{input_dir}/{seq_prefix}.fasta', input_dir=INPUT_DIR, seq_prefix=SEQ_PREFIX)
OUTPUT_DIR="test/motif_disco"
INPUT_DIR="public_html/demo_files"
#OLIGO_LEN="6"
OLIGO_LEN="6 7 8".split() # [6,7,8]
MARKOV=[1]

CLUSTER_QUEUE="short"
#QSUB_CMD_TORQUE="-m a -q {cluster_QUEUE} -N {job} -d ${PWD} -o ${JOB_DIR}/$${job}.log -e ${JOB_DIR}/$${job}.err ${QSUB_OPTIONS} ${JOB_DIR}/$${job}.sh".format()
QSUB_CMD_TORQUE="-m a -q "+CLUSTER_QUEUE

SEQ_PREFIXES = 'MET_up800-noorf PHO_up800-noorf'.split()
#SEQ_DIR = "public_html/demo_files"
#SEQ_PREFIXES, = glob_wildcards("public_html/demo_files/{seq_prefix}.fastq")

rule all:
#    input:expand('{output_dir}/{seq_prefix}_{oligo_len}nt_all.tab', seq_prefix=SEQ_PREFIXES, output_dir="results/motif_disco", oligo_len=OLIGO_LEN)
    input:expand('{output_dir}/oligos_{seq_prefix}_{oligo_len}nt_mkv{markov}.tab', seq_prefix=SEQ_PREFIXES, output_dir=OUTPUT_DIR, markov=MARKOV, oligo_len=OLIGO_LEN)
#    input: expand("results/{seq_prefix}/oligos/{seq_prefix}_{oligo_len}nt_all.tab", seq_prefix=SEQ_PREFIXES, oligo_len=3)
#    input:expand('public_html/demo_files/{seq_prefix}.{seq_ext}', seq_prefix=SEQ_PREFIXES, seq_ext=["fasta"])


rule purge:
    '''Purge sequences, i.e. mask redundant fragments
    (highly recommendedfor motif discovery).
'''
#    input: "public_html/demo_files/{seq_prefix}.fasta"
#    input: "{output_dir}/{seq_prefix}.fasta"
    input: INPUT_DIR+"/{seq_prefix}.fasta"
    output: "{output_dir}/{seq_prefix}_purged.fasta"
    log: "{output_dir}/{seq_prefix}_purge_log.txt"
    benchmark: "{output_dir}/{seq_prefix}_purge_benchmark.json"
    message: "Purging sequence\n\tInput:\t{input}\n\tOutput:\t{output}\n\tLog:\t{log}"
    shell: "purge-sequence -v 1 -i {input} -o {output} 2> {log}"

## Run oligo-analysis to count observed and expected occurrences for
## all the oligonucleotides
rule oligos_all:
#    input: rules.purge.output
    params: noov="-noov", strands="-2str"
    input: "{output_dir}/{seq_prefix}_purged.fasta"
    output: "{output_dir}/{seq_prefix}_{oligo_len, \d+}nt{params.strands}{params.noov}_all.tab"
    shell: "oligo-analysis -v 1 -l {wildcards.oligo_len} {params.strands} {params.noov} -i {input} -o {output}"

## Run oligo-analysis to detect over-represented oligonucleotides. The
## background model is built from the input set
rule oligos_mkv:
    params: noov="-noov", strands="-2str" #, oligo_len=OLIGO_LEN
    input: "{output_dir}/{seq_prefix}_purged.fasta"
    output: "{output_dir}/oligos_{seq_prefix}_{oligo_len, \d+}nt_mkv{markov, \d+}.tab"
    shell: "oligo-analysis -v 1 -l {wildcards.oligo_len} -markov {wildcards.markov} {params.strands} {params.noov} -return occ,freq,proba -sort proba -lth occ_sig 0 -i {input} -o {output}"

## Scan sequences with discovered oligonucleotides
rule dna_pattern:
    input: "{output_dir}/{seq_prefix}_{suffix}.tab", "public_html/demo_files/{seq_prefix}.fasta "
    output: "{output_dir}/oligos_{seq_prefix}_{oligo_len, \d+}nt{suffix}.ft"
    shell: "dna-pattern -v 1 -pl {input[0]} -i {input[1]}  | convert-features -from dnapat -to ft -o {output}"

## Tests:
##  snakemake --force -s snakemake_files/rules/motif_discovery.rules test/motif_disco/sequences/MET_up800-noorf_purged.fasta

onsuccess:
    print("Workflow finished, no error")

onerror:
    print("An error occurred")
    shell("mail -s 'an error occurred' jacques.van-helden@univ-mrs.fr < {log}")
